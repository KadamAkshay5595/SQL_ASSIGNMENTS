## ANS-1:
SELECT * FROM CITY WHERE COUNTRYCODE = "USA" AND
POPULATION > 100000;

## ANS-2:
SELECT NAME FROM CITY WHERE COUNTRYCODE = "USA" AND
POPULATION > 120000;

## ANS-3:
SELECT * FROM CITY;

## ANS-4:
SELECT * FROM CITY WHERE ID=1661; 

## ANS-5:
SELECT * FROM CITY WHERE COUNTRYCODE = "JPN";

## ANS-6:
SELECT NAME FROM CITY WHERE COUNTRYCODE = "JPN";

## ANS-7:
SELECT CITY,STATE FROM STATION;

## ANS-8:
SELECT DISTINCT(CITY) FROM STATION WHERE ID % 2 = 0;

## ANS-9:
SELECT COUNT(CITY)-COUNT(DISTINCT(CITY)) AS CITY_COUNT FROM STATION;

## ANS-10:
(SELECT CITY,LENGTH(CITY) 
FROM STATION WHERE LENGTH(CITY) IN (SELECT MIN(LENGTH(CITY)) FROM STATION ORDER BY LENGTH(CITY))
ORDER BY CITY LIMIT 1)
UNION
(SELECT CITY,LENGTH(CITY) 
FROM STATION WHERE LENGTH(CITY) IN (SELECT MAX(LENGTH(CITY)) FROM STATION ORDER BY LENGTH(CITY))
ORDER BY CITY LIMIT 1);

## ANS-11:
SELECT DISTINCT(CITY) FROM STATION 
WHERE UPPER(CITY) LIKE 'A%' OR
      UPPER(CITY) LIKE 'E%' OR 
      UPPER(CITY) LIKE 'I%' OR 
      UPPER(CITY) LIKE 'O%' OR 
      UPPER(CITY) LIKE 'U%';

## ANS-12:
SELECT DISTINCT(CITY) FROM STATION 
WHERE UPPER(CITY) LIKE '%A' OR
      UPPER(CITY) LIKE '%E' OR 
      UPPER(CITY) LIKE '%I' OR 
      UPPER(CITY) LIKE '%O' OR 
      UPPER(CITY) LIKE '%U';
      
## ANS-13:
SELECT DISTINCT(CITY) FROM STATION 
WHERE UPPER(CITY) NOT LIKE 'A%' OR
      UPPER(CITY) NOT LIKE 'E%' OR 
      UPPER(CITY) NOT LIKE 'I%' OR 
      UPPER(CITY) NOT LIKE 'O%' OR 
      UPPER(CITY) NOT LIKE 'U%';
      
## ANS-14:
SELECT DISTINCT(CITY) FROM STATION 
WHERE UPPER(CITY) NOT LIKE '%A' OR
      UPPER(CITY) NOT LIKE '%E' OR 
      UPPER(CITY) NOT LIKE '%I' OR 
      UPPER(CITY) NOT LIKE '%O' OR 
      UPPER(CITY) NOT LIKE '%U';
      
## ANS-15:
SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE 'A%' AND CITY NOT LIKE 'E%' AND CITY NOT LIKE 'I%' AND CITY NOT LIKE 'O%' AND CITY NOT LIKE 'U%'
  OR CITY NOT LIKE '%A' AND CITY NOT LIKE '%E' AND CITY NOT LIKE '%I' AND CITY NOT LIKE '%O' AND CITY NOT LIKE '%U';

## ANS-16:
SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE 'A%' AND CITY NOT LIKE 'E%' AND CITY NOT LIKE 'I%' AND CITY NOT LIKE 'O%' AND CITY NOT LIKE 'U%'
  AND CITY NOT LIKE '%A' AND CITY NOT LIKE '%E' AND CITY NOT LIKE '%I' AND CITY NOT LIKE '%O' AND CITY NOT LIKE '%U';

## ANS-17:
SELECT P.PRODUCT_ID,
       P.PRODUCT_NAME
FROM PRODUCT P JOIN SALES S
ON P.PRODUCT_ID = S.PRODUCT_ID
WHERE SALE_DATE >= 2019-01-01 AND  SALE_DATE <= 2019-03-31;

## ANS-18:
SELECT DISTINCT(AUTHOR_ID) AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID
ORDER BY ID;

## ANS-19:
SELECT ROUND(SUM(ORDER_TYPE)/COUNT(*)*100,2) AS OUTPUT FROM
(SELECT D_ID,
CASE
  WHEN ORDER_DATE = PREF_DEL_DATE THEN 1
  ELSE 0
END AS ORDER_TYPE FROM DELIVERY) X ;

## ANS-20:
select ad_id,ifnull(round(sum(clicked)/sum(total)*100,2),0) as ctr from
(select ad_id,
case when action='Clicked' then 1 else 0 end as clicked, case when action="Viewed" then 1 else 0 end as viewed,
case when action='Ignored' then 0 else 1 end as total from ads) x
group by ad_id
order by ctr desc,ad_id asc;

## ANS-21
SELECT E1.EMP_ID,
       E2.TEAM_SIZE 
FROM EMP E1 JOIN
(SELECT TEAM_ID,COUNT(TEAM_ID) AS TEAM_SIZE FROM EMP GROUP BY TEAM_ID) E2
ON E1.TEAM_ID=E2.TEAM_ID;

## ANS-22
SELECT C.COUNTRY_NAME,
       X.WEATHER_TYPE
FROM COUNTRIES C JOIN
(SELECT COUNTRY_ID,
CASE WHEN SUM(WEATHER_STATE)/COUNT(COUNTRY_ID) <=15 THEN COLD
     WHEN SUM(WEATHER_STATE)/COUNT(COUNTRY_ID) >=25 THEN HOT
     ELSE WARM END AS WEATHER_TYPE 
WHERE DAY >= '2019-11-01' AND DAY <= '2019-11-30') X
ON C.COUNTRY_ID = X.COUNTRY_ID
GROUP BY C.COUNTRY_ID;

## ANS-23:
SELECT PRODUCT_ID,ROUND(SUM(TOTAL_SALE)/SUM(UNITS),2) AS AVGG FROM (
SELECT U.PRODUCT_ID AS ID,
       U.UNITS AS UNITS,
       P.PRICE,
       U.UNITS*P.PRICE AS TOTAL_SALE
FROM PRICES P JOIN UNITSOLD U 
ON P.PRODUCT_ID = U.PRODUCT_ID
WHERE U.PURCHASE_DATE BETWEEN P.START_DATE AND P.END_DATE) X
GROUP BY PRODUCT_ID;

## ANS-24:
SELECT PLAYER_ID,
       EVENT_DATE AS FIRST_LOGIN
FROM( SELECT PLAYER_ID,
	         EVENT_DATE,
             ROW_NUMBER() OVER(PARTITION BY PLAYER_ID ORDER BY EVENT_DATE) AS RN
      FROM ACTIVITY) X
WHERE RN = 1;

## ANS-25:
SELECT PLAYER_ID,
       DEVICE_ID
FROM( SELECT PLAYER_ID,
             DEVICE_ID,
	         EVENT_DATE,
             ROW_NUMBER() OVER(PARTITION BY PLAYER_ID ORDER BY EVENT_DATE) AS RN
      FROM ACTIVITY) X
WHERE RN = 1;

## ANS-26:
SELECT PRODUCT_NAME,
       SUM(TOTAL_UNITS) FROM(
SELECT P.PRODUCT_NAME AS PRODUCT_NAME,
       O.UNITS AS TOTAL_UNITS
FROM PRODUCTS P JOIN ORDERS O 
ON P.PRODUCT_ID=O.PRODUCT_ID
WHERE ORDER_DATE BETWEEN '2020-02-01' AND '2020-02-28') X
GROUP BY PRODUCT_NAME;

## ANS-27:
SELECT * FROM USERS
WHERE MAIL REGEXP '^[a-zA-Z]+[a-zA-Z0-9_\\./\\-]{0,}@leetcode.com$';

## ANS-28:
WITH CTE AS (
SELECT C_ID,MONTH,SUM(TOTAL_PURCHASE) AS TOTAL FROM(
SELECT O.C_ID AS C_ID,
       P.PRICE*O.QUANTITY AS TOTAL_PURCHASE,
       CASE WHEN O.ORDER_DATE BETWEEN '2020-06-01' AND '2020-06-30' THEN 'JUNE'
            WHEN O.ORDER_DATE BETWEEN '2020-07-01' AND '2020-07-31' THEN 'JULY'
            END AS MONTH
FROM ORDERS O JOIN PRODUCTS P 
ON O.P_ID=P.P_ID) X
GROUP BY C_ID,MONTH)

SELECT DISTINCT(CTE.C_ID),C.NAME FROM 
CTE JOIN CUSTOMERS C ON CTE.C_ID = C.C_ID
WHERE CTE.C_ID IN (SELECT C_ID FROM CTE WHERE MONTH='JUNE' AND TOTAL>=100)
AND CTE.C_ID IN (SELECT C_ID FROM CTE WHERE MONTH='JULY' AND TOTAL>=100);

## ANS-29:
SELECT C.TITLE 
FROM CONTENTS C JOIN TV_PROGRAM T
ON C.CONTENT_ID = T.CONTENT_ID
WHERE T.PROGRAM_DATE BETWEEN '2020-06-01' AND '2020-06-30'
      AND KIDS_CONTENT = 'Y';

## ANS-30:
SELECT Q.ID, 
       Q.YEAR, 
       IFNULL(N.NPV,0) AS NPV
FROM QUERIES Q LEFT JOIN NPV V
ON (Q.ID, Q.YEAR) = (N.ID, N.YEAR);

## ANS-31:
SELECT Q.ID, 
       Q.YEAR, 
       IFNULL(N.NPV,0) AS NPV
FROM QUERIES Q LEFT JOIN NPV V
ON (Q.ID, Q.YEAR) = (N.ID, N.YEAR);

## ANS-32:
SELECT EU.UNIQUE_ID,
	E.NAME
FROM EMP_UNIQUE EU RIGHT JOIN EMP E
ON EU.ID = E.ID;

## ANS-33:
SELECT U.NAME,
       IFNULL(SUM(R.DISTANCE),0) 
FROM USERS U LEFT JOIN RIDES R 
ON U.ID = R.USER_ID
GROUP BY U.NAME
ORDER BY IFNULL(SUM(R.DISTANCE),0) DESC,NAME ASC;

## ANS-34:
WITH CTE AS(
SELECT PRODUCT_ID,
	   DATE_FORMAT('ORDER_DATE','%M') AS MONTH,
       UNITS
FROM ORDERS)

SELECT PRODUCT_NAME FROM PRODUCTS WHERE PRODUCT_ID IN(
SELECT PRODUCT_ID FROM CTE GROUP BY PRODUCT_ID,MONTH HAVING SUM(UNITS)>=100 AND MONTH='FEB');

## ANS-35:
(SELECT NAME AS RESULTS
FROM USERS
LEFT JOIN MOVIE_RATING
USING(USER_ID)
GROUP BY USER_ID
ORDER BY COUNT(RATING) DESC, NAME
LIMIT 1)

UNION

(SELECT TITLE
FROM MOVIES
LEFT JOIN MOVIE_RATING USING(MOVIE_ID)
WHERE LEFT(CREATED_AT,7) = '2020-02'
GROUP BY MOVIE_ID
ORDER BY AVG(RATING) DESC, TITLE
LIMIT 1);

## ANS-36:
SELECT U.NAME,
       IFNULL(SUM(R.DISTANCE),0) 
FROM USERS U LEFT JOIN RIDES R 
ON U.ID = R.USER_ID
GROUP BY U.NAME
ORDER BY IFNULL(SUM(R.DISTANCE),0) DESC,NAME ASC;

## ANS-37:
SELECT EU.UNIQUE_ID,
	E.NAME
FROM EMP_UNIQUE EU RIGHT JOIN EMP E
ON EU.ID = E.ID;

## ANS-38:
SELECT S.ID, S.NAME
FROM STUDENTS S
LEFT JOIN DEPARTMENT D
ON S.DEPARTMENT_ID = D.ID
WHERE D.ID IS NULL;

## ANS-39:
SELECT FROM_ID AS PERSON1,
	   TO_ID AS PERSON2,
       COUNT(DURATION) AS TOTAL_CALLS,
       SUM(DURATION) AS CALL_DURATION
FROM 
(SELECT * FROM CALLS
UNION ALL
(SELECT TO_ID,FROM_ID,DURATION FROM CALLS)) X
GROUP BY PERSON1,PERSON2
HAVING X.FROM_ID<X.TO_ID;

## ANS-40
SELECT PRODUCT_ID,ROUND(SUM(TOTAL_SALE)/SUM(UNITS),2) AS AVGG FROM (
SELECT U.PRODUCT_ID AS ID,
       U.UNITS AS UNITS,
       P.PRICE,
       U.UNITS*P.PRICE AS TOTAL_SALE
FROM PRICES P JOIN UNITSOLD U 
ON P.PRODUCT_ID = U.PRODUCT_ID
WHERE U.PURCHASE_DATE BETWEEN P.START_DATE AND P.END_DATE) X
GROUP BY PRODUCT_ID;

## ANS-41:
SELECT W_NAME,SUM(VOLUME) AS TOTAL_VOLUME
FROM(
SELECT W.NAME AS W_NAME,
       W.UNITS*P.WIDTH*P.LENGTH*P.HIGHT AS VOLUME
FROM WAREHOUSE W JOIN PRODUCTS P
ON W.P_ID=P.P_ID) X
GROUP BY W_NAME;

## ANS-42:
SELECT SALE_DATE, SUM(NUM) AS DIFF
FROM(
SELECT SALE_DATE,
       CASE WHEN FRUIT="apples" THEN SOLD_NUM
       WHEN FRUIT="oranges" THEN -SOLD_NUM
       END AS NUM
FROM SALES) X
GROUP BY SALE_DATE;

## ANS-43:
SELECT ROUND(A_FRAC.PLAYERCOUNT / COUNT(DISTINCT A_FULL.PLAYER_ID), 2) AS FRACTION
FROM ACTIVITY A_FULL,
(SELECT COUNT(DISTINCT A1.PLAYER_ID) AS PLAYER_COUNT
FROM ACTIVITY A1
INNER JOIN
(SELECT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_LOGIN
FROM ACTIVITY
GROUP BY PLAYER_ID) A2
ON A1.PLAYER_ID = A2.PLAYER_ID AND DATEDIFF(A1.EVENT_DATE, A2.FIRST_LOGIN) = 1) A_FRAC;

## ANS-44:
SELECT NAME FROM EMPLOYEE WHERE MANAGER_ID IN (
SELECT MANAGER_ID FROM EMPLOYEE GROUP BY MANAGER_ID HAVING COUNT(MANAGER_ID)>=5);

## ANS-45:
SELECT D.DEPT_NAME,
       X.STUDENT_NUMBER
FROM DEPARTMENT D LEFT JOIN 
(SELECT DEPT_ID,COUNT(DEPT_ID) AS STUDENT_NUMBER FROM STUDENTS GROUP BY DEPT_ID) X
ON D.DEPT_ID = X.DEPT_ID;

## ANS-46:
SELECT CUST_ID FROM CUSTOMER 
GROUP BY CUST_ID
HAVING COUNT(CUST_ID) = (SELECT DISTINCT(COUNT(PRODUCT_KEY)) FROM PRODUCT);

## ANS-47:
SELECT PROJECT_ID,EMP_ID FROM PROJECT JOIN EMP USING(EMP_ID)
WHERE (PROJECT_ID,YOE) IN (
SELECT P.PROJECT_ID AS P_ID,
        MAX(E.YOE) AS YOE
FROM PROJECT P JOIN EMP E
ON P.EMP_ID=E.EMP_ID
GROUP BY P_ID
HAVING MAX(E.YOE));

## ANS-48:
SELECT BOOK_ID,NAME 
FROM BOOKS
WHERE BOOK_ID NOT IN (
    SELECT BOOK_ID 
    FROM ORDERS 
    WHERE(DISPATCH_DATE BETWEEN DATE_SUB('2019-06-23',INTERVAL 1 YEAR) AND '2019-06-23') 
    GROUP BY BOOK_ID 
    HAVING SUM(QUANTITY) >= 10)
AND 
    AVAILABLE_FROM < DATE_SUB('2019-06-23', INTERVAL 1 MONTH);
    
## ANS-49:
SELECT STUDENT_ID,MIN(COURSE_ID),GRADE FROM ENROLLMENTS
WHERE (STUDENT_ID,GRADE) IN (
SELECT STUDENT_ID,
       MAX(GRADE) AS GRADE
FROM ENROLLMENTS
GROUP BY STUDENT_ID)
GROUP BY STUDENT_ID, GRADE
ORDER BY STUDENT_ID;

## ANS-50:
SELECT GROUP_ID, 
       PLAYER_ID 
FROM(
       SELECT P.PLAYER_ID, 
	          PS.PLAYER_ID, 
	          SUM(PS.SCORE) AS SCORE 
       FROM PLAYERS P INNER JOIN
               (SELECT FIRST_PLAYER AS PLAYER_ID, 
                       FIRST_SCORE  AS SCORE 
                FROM MATCHES 
                UNION ALL 
                SELECT SECOND_PLAYER AS PLAYER_ID,
                       SECOND_SCORE  AS SCORE
                FROM MATCHES) PS 
        ON  P.PLAYER_ID = PS.PLAYER_ID 
        GROUP  BY PS.PLAYER_ID 
        ORDER  BY GROUP_ID, 
                  SCORE DESC, 
                  PLAYER_ID) TOP_SCORES 
GROUP  BY GROUP_ID;